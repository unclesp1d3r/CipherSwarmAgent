---
description: Requirements management and documentation consistency guidelines
globs: project_spec/*.md,**/*.md,**/*.mdc
alwaysApply: false
---

# Project Specification Management Guidelines

## Overview

This document provides comprehensive guidelines for managing requirements, tasks, and user stories in the project. It ensures consistency across all specification documents and maintains proper alignment between requirements and implementation.

## Project Specification Files

### Core Specification Documents

The `project_spec/` directory contains three essential documents that work together to define the complete project scope:

- **[requirements.md](project_spec/requirements.md)** - **Complete requirements specification**
  - Contains all functional requirements (F001-F025) and technical requirements
  - Defines system capabilities, constraints, and implementation details
  - Serves as the authoritative source for what the system must do
  - Includes document metadata for version control and change tracking
  - This document is the source of truth for the project and should be updated as the project evolves
  - Requirements should be written using **EARS notation** (Easy Approach to Requirements Syntax)
    - **Ubiquitous**: Always-occurring fundamental system properties (e.g., "The software shall be written in Go")
    - **Event-driven**: Triggered by specific events (e.g., "When the convert command is executed, then the system shall parse the XML file")
    - **Unwanted behaviors**: Error handling and failure management (e.g., "If the XML file is invalid, then the system shall display an error message")
    - **State-driven**: Behavior while in specific states (e.g., "When in validation mode, then the system shall check all configuration elements")
    - **Optional features**: Conditional functionality (e.g., "Where audit plugins are enabled, then the system shall run compliance checks")

- **[tasks.md](project_spec/tasks.md)** - **Detailed implementation plan**
  - Breaks down requirements into discrete, trackable tasks and sub-tasks
  - Provides clear task descriptions, expected outcomes, and acceptance criteria
  - Identifies necessary resources, dependencies, and implementation context
  - Tracks progress through task lifecycle (not started, in progress, completed)
  - Links tasks to specific requirements and user stories
  - Serves as the primary project management tool for implementation tracking

- **[user_stories.md](project_spec/user_stories.md)** - **User stories and use cases**
  - Defines user-centric requirements and scenarios
  - Provides context for why features are needed
  - Helps prioritize development based on user value
  - Supports acceptance criteria and testing scenarios

### Document Relationships

- **Requirements** define WHAT the system must do
- **Tasks** define HOW to implement the requirements
- **User Stories** define WHY the requirements matter to users
- All three documents should remain synchronized and cross-referenced

## Requirements Document Standards

### Document Structure

- **Functional Requirements (F001-F025)**: Core system capabilities and features
- **Technical Requirements**: Implementation details and technical constraints
- **User Stories**: User-centric requirements and use cases
- **System Architecture**: High-level design and component relationships

### Style Consistency

- **Concise Format**: Requirements should be concise, single-line entries with key details in parentheses
- **Reference Pattern**: Use format `F### (key details)` for functional requirements
- **Cross-References**: Include relevant requirement numbers in parentheses when referencing other requirements
- **Balance**: Strike balance between conciseness and comprehensiveness - avoid verbose multi-bullet requirements
- **Acceptance Criteria**: Every requirement must include clear, testable acceptance criteria that define when the requirement is satisfied
- **RFC Compliance**: Requirements must comply with RFC 2119 and RFC 8174 for key words and requirement language
  - **MUST/SHALL**: Absolute requirement (RFC 2119)
  - **MUST NOT/SHALL NOT**: Absolute prohibition (RFC 2119)
  - **SHOULD/SHOULD NOT**: Recommended but not mandatory (RFC 2119)
  - **MAY/OPTIONAL**: Truly optional (RFC 2119)
  - **Implementation Level**: Use RFC 8174 for implementation-specific requirements

### Maintenance Guidelines

- **Version Control**: Update document version and last modified date when making changes
- **Change Tracking**: Document specific changes in metadata section with rationale
- **Consistency**: Ensure all requirements follow the same style and format
- **Redundancy**: Avoid duplicating information already covered in architecture or other sections
- **Impact Analysis**: Assess impact of requirement changes on existing tasks and user stories
- **Stakeholder Review**: Review requirement changes with relevant stakeholders before implementation

### Requirement Prioritization

- **Priority Levels**: Use consistent priority levels (Critical, High, Medium, Low) for all requirements
- **Business Value**: Prioritize requirements based on business impact and user value
- **Dependencies**: Consider technical dependencies when setting priorities
- **Risk Assessment**: Factor in implementation risk and complexity
- **Stakeholder Input**: Incorporate stakeholder feedback in priority decisions

## Task Documentation Standards

### Task Structure

Each task should follow this consistent structure for discrete, trackable implementation:

```markdown
- [ ] **TASK-###**: Task Title

  - **Description**: Clear, detailed explanation of what this task accomplishes
  - **Context**: Why this task is needed and its relationship to project goals
  - **Requirement**: List all relevant requirement numbers (F###)
  - **User Story**: Reference applicable user stories (US-###)
  - **GitHub Issue**: Link to associated GitHub issue when applicable (https://github.com/owner/repo/issues/123: "Issue Title")
  - **Expected Outcome**: Specific deliverables and success criteria
  - **Dependencies**: Prerequisites, resources, or other tasks that must be completed first
  - **Implementation**: Specific steps, approach, and technical considerations
  - **Acceptance**: Clear, testable acceptance criteria for completion
  - **Resources**: Any tools, documentation, or external resources needed
```

### Task Lifecycle Management

#### Task States

- **[ ]**: Not started
- **[~]**: In progress
- **[x]**: Completed
- **[!]**: Blocked or needs attention

#### Update Process

- **Status Updates**: Update task status as work progresses
- **Requirement Changes**: Update task requirements when requirements change
- **Dependency Tracking**: Note dependencies between tasks
- **Progress Tracking**: Document progress and blockers

### Task Categories

#### Phase 1: Core Infrastructure

- **TASK-001** to **TASK-010**: Basic setup, dependencies, and core functionality

#### Phase 2: Data Processing

- **TASK-011** to **TASK-020**: XML parsing, model creation, and data conversion

#### Phase 3: Output Generation

- **TASK-021** to **TASK-030**: Markdown generation, display, and export functionality

#### Phase 4: Audit Engine

- **TASK-031** to **TASK-040**: Audit functionality, plugins, and compliance checking

#### Phase 5: Integration and Testing

- **TASK-041** to **TASK-050**: Integration testing, documentation, and final validation

## Alignment Standards

### Requirement References

- **Explicit References**: Always include requirement numbers (F###) in task descriptions
- **User Story References**: Include relevant user story numbers (US-###) when applicable
- **Cross-Validation**: Ensure tasks align with current requirement descriptions
- **Update Frequency**: Review and update task requirements when requirements change
- **Completeness**: Ensure all requirements have corresponding tasks

### User Story Integration

- **Story References**: Include relevant user story numbers when applicable
- **User-Centric**: Frame tasks in terms of user value and outcomes
- **Acceptance Criteria**: Define clear, testable acceptance criteria
- **Priority Alignment**: Align task priority with user story priority

## Quality Assurance

### Review Process

- **Style Consistency**: Verify all requirements follow the same format
- **Completeness**: Ensure all requirements are properly documented
- **Alignment**: Check that tasks reference current requirement descriptions
- **Metadata**: Update document metadata when making changes
- **Clarity**: Verify task descriptions are clear and actionable
- **Dependencies**: Check for missing dependencies or blockers

### Validation Commands

```bash
# Check markdown formatting
just format

# Run comprehensive checks
just ci-check

# Validate requirements consistency
grep -n "F0[0-9][0-9]" project_spec/requirements.md

# Check task-requirement alignment
grep -n "TASK-" project_spec/tasks.md
grep -n "F0[0-9][0-9]" project_spec/tasks.md

# Validate GitHub issue links
grep -n "github.com.*issues" project_spec/tasks.md

# Check for missing acceptance criteria
grep -n "Acceptance:" project_spec/tasks.md | wc -l
grep -n "TASK-" project_spec/tasks.md | wc -l
```

## Requirement Traceability

### Traceability Matrix

- **Requirements to Tasks**: Every requirement must have corresponding implementation tasks
- **Requirements to User Stories**: Link requirements to user stories that drive them
- **Requirements to Tests**: Ensure requirements have corresponding test cases
- **Requirements to Code**: Maintain traceability from requirements to code implementation
- **Change Impact**: Track how requirement changes affect related artifacts

## Key Documents

- **[requirements.md](project_spec/requirements.md)** - Complete requirements specification
- **[tasks.md](project_spec/tasks.md)** - Implementation task checklist
- **[user_stories.md](project_spec/user_stories.md)** - User stories and use cases
- **[ARCHITECTURE.md](ARCHITECTURE.md)** - System architecture documentation
